{"version":3,"sources":["comp/SearchSection.js","comp/WeatherOutput.js","comp/App.js","reportWebVitals.js","index.js"],"names":["SearchSection","props","onSubmit","citySubmit","type","value","onChange","cityChange","placeholder","WeatherOutput","weather","cityErr","cityName","cityTemp","cityPressure","cityWind","container","className","String","App","state","cityDate","handleInputCity","e","setState","target","handleSubmit","preventDefault","console","log","API","fetch","then","response","ok","Error","json","data","time","Date","toLocaleString","main","temp","pressure","wind","speed","catch","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAkBeA,EAhBO,SAACC,GACrB,OACE,qCACE,6CACA,uBAAMC,SAAUD,EAAME,WAAtB,UACE,uBAAOC,KAAK,OACVC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,WAChBC,YAAY,iBAEd,wDCiBOC,EA3BO,SAACR,GAErB,MAAgEA,EAAMS,QAA9DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,aAAcC,EAAnD,EAAmDA,SAC/CC,EAAY,KAiBhB,OAdIJ,IAAaD,IACfK,EACI,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,0CADF,UACyBC,OAAON,OAEhC,sBAAKK,UAAU,OAAf,UAAsB,0CAAtB,UAA6CC,OAAOL,IAApD,YACA,sBAAKI,UAAU,WAAf,UAA0B,8CAA1B,UAAqDC,OAAOJ,GAA5D,WACA,sBAAKG,UAAU,OAAf,UAAsB,0CAAtB,UAA6CC,OAAOH,GAApD,eAON,qBAAKE,UAAU,iBAAf,SACGN,EAAO,qBAAiBC,EAAjB,iBAA2CI,KCnBnDG,E,4MAEJC,MAAQ,CACNf,MAAO,GACPgB,SAAU,GACVT,SAAU,GACVC,SAAU,GACVC,aAAc,GACdC,SAAU,GACVJ,SAAS,G,EAGXW,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZnB,MAAOkB,EAAEE,OAAOpB,S,EAIpBqB,aAAe,SAACH,GACdA,EAAEI,iBACFC,QAAQC,IAAI,sBAEZ,IAAMC,EAAG,4DAAwD,EAAKV,MAAMf,MAAnE,wDAET0B,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,2BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIC,MAAOC,iBACxB,EAAKhB,SAAS,CACZb,SAAS,EACTU,SAAUiB,EACV1B,SAAU,EAAKQ,MAAMf,MACrBQ,SAAUwB,EAAKI,KAAKC,KACpB5B,aAAcuB,EAAKI,KAAKE,SACxB5B,SAAUsB,EAAKO,KAAKC,WAGvBC,OAAM,SAAAnC,GACLiB,QAAQC,IAAIlB,GACZ,EAAKa,SAAS,CACZb,SAAS,EACTC,SAAU,EAAKQ,MAAMf,Y,4CAK7B,WACE,OAAQ,sBACFY,UAAU,MADR,UAEN,cACE,EADF,CACgBZ,MAAO0C,KAAK3B,MAAMf,MAChCE,WAAYwC,KAAKzB,gBACjBnB,WAAY4C,KAAKrB,eALb,IAMH,cACD,EADC,CACahB,QAASqC,KAAK3B,QAPxB,W,GArDM4B,aAkEH7B,IC3DA8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d7a1c511.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchSection = (props) => {\r\n  return (\r\n    <>\r\n      <h2>Weather App</h2>\r\n      <form onSubmit={props.citySubmit}>\r\n        <input type=\"text\"\r\n          value={props.value}\r\n          onChange={props.cityChange}\r\n          placeholder=\"Type City...\"\r\n        />\r\n        <button>Search city</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchSection;","import React from 'react';\r\n\r\nconst WeatherOutput = (props) => {\r\n\r\n  const { cityErr, cityName, cityTemp, cityPressure, cityWind } = props.weather;\r\n  let container = null;\r\n\r\n\r\n  if (cityName && !cityErr) {\r\n    container = (\r\n        <div className=\"resultContainer\">\r\n          <div className=\"city\">\r\n            <span>City: </span>{`${String(cityName)}`}\r\n          </div>\r\n          <div className=\"temp\"><span>Temp: </span>{`${String(cityTemp)}`} &#176;C</div>\r\n          <div className=\"pressure\"><span>Pressure: </span>{`${String(cityPressure)} hPa`}</div>\r\n          <div className=\"wind\"><span>Wind: </span>{`${String(cityWind)} m/s`}</div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"errorContainer\">\r\n      {cityErr ? `We haven't ${cityName} in database.` : container}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherOutput;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchSection from './SearchSection';\r\nimport WeatherOutput from './WeatherOutput';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    value: \"\",\r\n    cityDate: \"\",\r\n    cityName: \"\",\r\n    cityTemp: \"\",\r\n    cityPressure: \"\",\r\n    cityWind: \"\",\r\n    cityErr: false,\r\n  }\r\n\r\n  handleInputCity = (e) => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"event confirmation\");\r\n\r\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=efa2ef11f117f7485b2fca8e87a3a2f5&units=metric`;\r\n\r\n    fetch(API)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(\"Something goes wrong\")\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const time = new Date().toLocaleString();\r\n        this.setState({\r\n          cityErr: false,\r\n          cityDate: time,\r\n          cityName: this.state.value,\r\n          cityTemp: data.main.temp,\r\n          cityPressure: data.main.pressure,\r\n          cityWind: data.wind.speed,\r\n        })\r\n      })\r\n      .catch(cityErr => {\r\n        console.log(cityErr);\r\n        this.setState({\r\n          cityErr: true,\r\n          cityName: this.state.value,\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (<\r\n      div className=\"App\" >\r\n      <\r\n        SearchSection value={this.state.value}\r\n        cityChange={this.handleInputCity}\r\n        citySubmit={this.handleSubmit}\r\n      /> <\r\n        WeatherOutput weather={this.state}\r\n      /> </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './comp/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode >\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}